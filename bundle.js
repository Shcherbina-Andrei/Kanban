(()=>{"use strict";const e=(e,t,n="beforeend")=>{if(!(e instanceof s))throw new Error("Can render only components");if(null===t)throw new Error("Container element doesn't exist");t.insertAdjacentElement(n,e.element)},t=e=>{if(null===e)return null;if(!(e instanceof s))throw new Error("Can remove only components");e.element.remove(),e.removeElement()};class s{#e=null;_callback={};constructor(){if(new.target===s)throw new Error("Can't instantiate AbstractView, only concrete one.")}get element(){return this.#e||(this.#e=(e=>{const t=document.createElement("div");return t.innerHTML=e,t.firstElementChild})(this.template)),this.#e}get template(){throw new Error("Abstract method not implemented: get template")}removeElement(){this.#e=null}}class n extends s{get template(){return'\n  <section class="taskboard">\n    <h2 class="visually-hidden">Ваши задачи:</h2>\n  </section>\n'}}class a extends s{_state={};updateElement=e=>{e&&(this._setState(e),this.#t())};_restoreHandlers=()=>{throw new Error("Abstract method not implemented: restoreHandlers")};_setState=e=>{this._state={...this._state,...e}};#t=()=>{const e=this.element,t=e.parentElement;this.removeElement();const s=this.element;t.replaceChild(s,e),this._restoreHandlers()}}class r extends a{get template(){return'\n    <section class="add-task">\n        <h2 class="visually-hidden">Добавить задачу</h2>\n        <form class="add-task__form" aria-label="Форма добавления задачи">\n          <div class="add-task__input-wrapper">\n          <label for="add-task">Новая задача</label>\n            <input type="text" name="task-name" id="add-task" placeholder="Название задачи..." required>\n          </div>\n          <button class="add-task__button button" type="submit">\n            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">\n              <rect x="10.0833" y="3.66663" width="1.83333" height="14.6667" fill="white" />\n              <rect x="18.3333" y="10.0833" width="1.83333" height="14.6667" transform="rotate(90 18.3333 10.0833)"\n                fill="white" />\n            </svg>\n            <span>Добавить</span>\n          </button>\n        </form>\n      </section>\n  '}setAddTaskHandler=e=>{this._callback.addTask=e,this.element.querySelector(".add-task__form").addEventListener("submit",this.#s)};#n=()=>{document.querySelector("#add-task").value=""};#s=e=>{e.preventDefault();const t=document.querySelector("#add-task").value;this._callback.addTask(t),this.#n()}}const i="backlog",o="processing",l="done",d="basket",h="UPDATE_TASK",c="ADD_TASK",k="DELETE_TASK";class p{#a=null;#r=null;#i=null;constructor(e,t){this.#a=e,this.#i=t}init=()=>{this.#o(),this.#r.setAddTaskHandler(this.#l)};#l=e=>{const t={group:i,description:e};this.#i(c,t)};#o=()=>{this.#r=new r,e(this.#r,this.#a)}}class u extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--backlog">\n    <h3 class="taskboard__group-heading taskboard__group-heading--backlog">Бэклог</h3>\n  </article>\n'}}class m extends s{#d=null;constructor(e){super(),this.#d=e}get template(){return(e=>{let t;switch(e){case o:case l:t="taskboard__list--sorted";break;case d:t="taskboard__list--trash";break;default:t=""}return`\n  <div class="taskboard__list ${t}" data-type=${e}></div>\n  `})(this.#d)}setDragOverMoveHandler=()=>{this.element.addEventListener("dragover",(e=>{e.preventDefault();const t=document.querySelector(".task--dragged");let s=t.parentElement;const n=e.target;if(!n.classList.contains("task"))return;n.parentElement!==s&&(s=n.parentElement);const a=n===t.nextElementSibling?n.nextElementSibling:n;s.insertBefore(t,a)}))}}class _ extends s{get template(){return'\n  <div class="taskboard__item task task--empty">\n    <p>Добавьте задачу</p>\n  </div>\n'}}class g extends a{constructor(e){super(),this._state=this.parseTaskToState(e)}get template(){return(e=>{let t;switch(e.group){case o:t="task--processing";break;case l:t="task--done";break;case d:t="task--basket";break;default:t=""}return`\n  <div class="taskboard__item task ${t}" draggable='true' data-id=${e.id}>\n    <div class="task__body">\n      <p class="task__view">${e.description}</p>\n      <input class="task__input" type="text" value='${e.description}'>\n    </div>\n    <button class="task__edit" type="button" aria-label="Изменить"></button>\n  </div>\n`})(this._state)}setDragStartMoveHandler=()=>{this.element.addEventListener("dragstart",(e=>{const t=e.target;t.classList.contains("task")&&t.classList.add("task--dragged")}))};setDragEndMoveHandler=e=>{this._callback.moveTask=e,this.element.addEventListener("dragend",this.#h)};#h=e=>{const t=document.querySelector(".task--dragged"),s=t.dataset.id,n=t.nextElementSibling?t.nextElementSibling.dataset.id:0;if(t.parentElement.classList.contains("taskboard__list")){const a=t.parentElement.dataset.type;this._callback.moveTask(s,n,a),e.target.classList.remove("task--dragged")}};setEditTaskClickHandler=e=>{this._callback.editClick=e,this.element.querySelector(".task__edit").addEventListener("click",this.#c)};#c=e=>{e.preventDefault(),this.element.draggable=!1,this._callback.editClick()};setSaveEditingTaskHandler=e=>{this._callback.saveTask=e,this.element.addEventListener("keydown",this.#k)};#k=e=>{const t=this.element.querySelector(".task__input").value;if("Enter"===e.code){if(t.length<3)return;this._state.description=t,this.element.draggable=!0,this._callback.saveTask(this.parseTaskToState(this._state))}};parseTaskToState=e=>({...e});parseStateToTask=e=>({...e});reset=e=>{this.updateElement(this.parseStateToTask(e))};_restoreHandlers=()=>{this.setEditTaskClickHandler(this._callback.editClick),this.setSaveEditingTaskHandler(this._callback.saveTask),this.setDragStartMoveHandler(),this.setDragEndMoveHandler(this._callback.moveTask)}}const b="default";class C{#p=null;#u=b;#a=null;#m=null;#i=null;#_=null;#g=null;constructor(e,t,s,n){this.#a=e,this.#i=t,this.#_=s,this.#g=n}init=n=>{this.#p=n;const a=this.#m;this.#m=new g(this.#p),this.#m.setEditTaskClickHandler(this.#b),this.#m.setSaveEditingTaskHandler(this.#C),this.#m.setDragStartMoveHandler(),this.#m.setDragEndMoveHandler(this.#g),window.addEventListener("keydown",this.#w),null!==a?(((e,t)=>{if(!(e instanceof s&&t instanceof s))throw new Error("Can replace only components");const n=e.element,a=t.element,r=a.parentElement;if(null===r)throw new Error("Parent element doesn't exist");r.replaceChild(n,a)})(this.#m,a),t(a)):e(this.#m,this.#a)};#v=()=>{this.#m.element.classList.remove("task--active"),this.#u=b};#b=()=>{this.#u===b&&(this.#m.element.classList.add("task--active"),this.#_(),this.#u="editing")};#C=e=>{this.#v(),this.#i(h,e)};resetView=()=>{this.#u!==b&&this.#v()};destroy=()=>{t(this.#m)};#w=e=>{"Escape"===e.code&&(this.#m.reset(this.#p),this.#v())}}class w{_container=null;_tasks=null;_taskPresenters=new Map;_handleModeChange=null;_handleChangeData=null;_handleChangePosition=null;_taskBoardListComponent=null;_groupComponent=null;_emptyComponent=null;init=e=>{this._tasks=e,this._renderTasksGroup(),this._taskBoardListComponent.setDragOverMoveHandler()};resetGroupView=()=>{this._taskPresenters.forEach((e=>e.resetView()))};_renderTask=e=>{const t=new C(this._taskBoardListComponent.element,this._handleChangeData,this._handleModeChange,this._handleChangePosition);t.init(e),this._taskPresenters.set(e.id,t)};_renderTasks=()=>this._tasks.forEach((e=>this._renderTask(e)));_renderNoTasks=()=>{e(this._emptyComponent,this._taskBoardListComponent.element)};_clearGroupHandler=()=>{this._taskPresenters.forEach((e=>e.destroy())),this._taskPresenters.clear()};_renderTasksGroup=()=>{e(this._groupComponent,this._container),e(this._taskBoardListComponent,this._groupComponent.element),0!==this._tasks.length?this._renderTasks():this._renderNoTasks()};destroy=()=>{t(this._groupComponent),t(this._taskBoardListComponent),this._clearGroupHandler()}}class v extends w{constructor(e,t,s,n){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=n,this._taskBoardListComponent=new m(i),this._groupComponent=new u,this._emptyComponent=new _}}class T extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--processing">\n    <h3 class="taskboard__group-heading taskboard__group-heading--processing">В процессе</h3>\n  </article>\n'}}class f extends s{get template(){return'\n  <div class="taskboard__item task task--empty">\n    <p>Перетащите карточку</p>\n  </div>\n'}}class E extends w{constructor(e,t,s,n){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=n,this._taskBoardListComponent=new m(o),this._groupComponent=new T,this._emptyComponent=new f}}class y extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--done">\n    <h3 class="taskboard__group-heading taskboard__group-heading--done">Готово</h3>\n  </article>\n'}}class P extends w{constructor(e,t,s,n){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=n,this._taskBoardListComponent=new m(l),this._groupComponent=new y,this._emptyComponent=new f}}class H extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--basket">\n    <h3 class="taskboard__group-heading taskboard__group-heading--basket">Корзина</h3>\n  </article>\n'}}class D extends s{#T=null;constructor(e){super(),this.#T=e}get template(){return`\n  <button class="taskboard__button button button--clear" type="button" ${this.#T?"disabled":""}>\n    <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">\n      <rect x="15.5374" y="5.16638" width="1.83333" height="14.6667" transform="rotate(45 15.5374 5.16638)"\n        fill="white" />\n      <rect x="16.8337" y="15.5372" width="1.83333" height="14.6667" transform="rotate(135 16.8337 15.5372)"\n        fill="white" />\n    </svg>\n    <span>Очистить</span>\n  </button>\n`}setClearBoardClickHandler=e=>{this._callback.clearBoard=e,this.element.addEventListener("click",this.#f)};#f=e=>{e.preventDefault(),this._callback.clearBoard()}}class B extends s{get template(){return'\n  <div class="task--empty task task--empty-trash">\n    <p>Корзина пуста</p>\n  </div>\n'}}class x extends w{#E=null;#T=!1;constructor(e,t,s,n){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=n,this._taskBoardListComponent=new m(d),this._groupComponent=new H,this._emptyComponent=new B}_clearBasketHandler=()=>{this._taskPresenters.forEach((e=>e.destroy())),this._taskPresenters.clear(),this.#T=!0,this._handleChangeData(k,this._tasks)};_renderClearButton=()=>{this.#E=new D(this.#T),this.#E.setClearBoardClickHandler(this._clearBasketHandler),e(this.#E,this._groupComponent.element)};_renderTasksGroup=()=>{e(this._groupComponent,this._container),e(this._taskBoardListComponent,this._groupComponent.element),0===this._tasks.length?(this._renderNoTasks(),this.#T=!0):(this._renderTasks(),this.#T=!1),this._renderClearButton()}}const M={[i]:e=>e.filter((e=>e.group===i)),[o]:e=>e.filter((e=>e.group===o)),[l]:e=>e.filter((e=>e.group===l)),[d]:e=>e.filter((e=>e.group===d))};class S{#y=new Set;addObserver(e){this.#y.add(e)}removeObserver(e){this.#y.delete(e)}_notify(e,t){this.#y.forEach((s=>s(e,t)))}}const G=e=>{localStorage.setItem("tasks",JSON.stringify(e))};let L=(e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+((t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?"-":"_")),"");const A=document.querySelector(".board-app__main").querySelector(".board-app__inner"),V=new class extends S{#P=[];constructor(){super()}init=()=>{this.#P=(()=>{const e=localStorage.getItem("tasks");return e?JSON.parse(e):[]})(),this._notify()};get tasks(){return this.#P}updateTask=e=>{const t=this.#P.findIndex((t=>t.id===e.id));if(-1===t)throw new Error("Can't update unexciting task");this.#P=[...this.#P.slice(0,t),e,...this.#P.slice(t+1)],G(this.#P),this._notify()};addTask=e=>{const t={...e,id:L()};this.#P=[...this.#P,t],G(this.#P),this._notify()};removeTasks=e=>{e.forEach((e=>{const t=this.#P.findIndex((t=>t.id===e.id));if(-1===t)throw new Error("Can't delete unexciting task");this.#P=[...this.#P.slice(0,t),...this.#P.slice(t+1)]})),G(this.#P),this._notify()};changePositionTask=(e,t)=>{const s=this.#P.findIndex((t=>e.id===t.id));if(this.#P=[...this.#P.slice(0,s),...this.#P.slice(s+1)],t){const s=this.#P.findIndex((e=>t===e.id));this.#P=[...this.#P.slice(0,s),e,...this.#P.slice(s)]}else this.#P=[...this.#P,e];G(this.#P),this._notify()};getBacklogTasks=()=>M[i](this.tasks);getProcessingTasks=()=>M[o](this.tasks);getDoneTasks=()=>M[l](this.tasks);getBasketTasks=()=>M[d](this.tasks)};V.init();const q=new class{#a=null;#H=null;#D=new n;#B=null;#x=null;#M=null;#S=null;#G=null;constructor(e,t){this.#a=e,this.#H=t,this.#B=new p(e,this.#L),this.#x=new v(this.#D.element,this.#A,this.#L,this.#V),this.#M=new E(this.#D.element,this.#A,this.#L,this.#V),this.#S=new P(this.#D.element,this.#A,this.#L,this.#V),this.#G=new x(this.#D.element,this.#A,this.#L,this.#V),this.#H.addObserver(this.#q)}init=()=>{this.#B.init(),this.#N()};get tasks(){return this.#H.tasks}#A=()=>{this.#x.resetGroupView(),this.#M.resetGroupView(),this.#S.resetGroupView(),this.#G.resetGroupView()};#L=(e,t)=>{switch(e){case h:this.#H.updateTask(t);break;case c:this.#H.addTask(t);break;case k:this.#H.removeTasks(t)}};#V=(e,t,s)=>{const n=this.tasks.find((t=>e===t.id)),a={...n,group:s};this.#H.changePositionTask(a,t),n.group!==s&&this.#L(h,a)};#q=()=>{this.#O(),this.#N()};#N=()=>{e(this.#D,this.#a),this.#x.init(M[i](this.tasks)),this.#M.init(M[o](this.tasks)),this.#S.init(M[l](this.tasks)),this.#G.init(M[d](this.tasks))};#O=()=>{this.#x.destroy(),this.#M.destroy(),this.#S.destroy(),this.#G.destroy()}}(A,V);q.init()})();
//# sourceMappingURL=bundle.js.map