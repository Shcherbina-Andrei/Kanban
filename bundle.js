(()=>{"use strict";const e=(e,t,a="beforeend")=>{if(!(e instanceof s))throw new Error("Can render only components");if(null===t)throw new Error("Container element doesn't exist");t.insertAdjacentElement(a,e.element)},t=e=>{if(null===e)return null;if(!(e instanceof s))throw new Error("Can remove only components");e.element.remove(),e.removeElement()};class s{#e=null;_callback={};constructor(){if(new.target===s)throw new Error("Can't instantiate AbstractView, only concrete one.")}get element(){return this.#e||(this.#e=(e=>{const t=document.createElement("div");return t.innerHTML=e,t.firstElementChild})(this.template)),this.#e}get template(){throw new Error("Abstract method not implemented: get template")}removeElement(){this.#e=null}}class a extends s{get template(){return'\n  <section class="taskboard">\n    <h2 class="visually-hidden">Ваши задачи:</h2>\n  </section>\n'}}class n extends s{_state={};updateElement=e=>{e&&(this._setState(e),this.#t())};_restoreHandlers=()=>{throw new Error("Abstract method not implemented: restoreHandlers")};_setState=e=>{this._state={...this._state,...e}};#t=()=>{const e=this.element,t=e.parentElement;this.removeElement();const s=this.element;t.replaceChild(s,e),this._restoreHandlers()}}class r extends n{get template(){return'\n    <section class="add-task">\n        <h2 class="visually-hidden">Добавить задачу</h2>\n        <form class="add-task__form" aria-label="Форма добавления задачи">\n          <div class="add-task__input-wrapper">\n          <label for="add-task">Новая задача</label>\n            <input type="text" name="task-name" id="add-task" placeholder="Название задачи..." required>\n          </div>\n          <button class="add-task__button button" type="submit">\n            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">\n              <rect x="10.0833" y="3.66663" width="1.83333" height="14.6667" fill="white" />\n              <rect x="18.3333" y="10.0833" width="1.83333" height="14.6667" transform="rotate(90 18.3333 10.0833)"\n                fill="white" />\n            </svg>\n            <span>Добавить</span>\n          </button>\n        </form>\n      </section>\n  '}setAddTaskHandler=e=>{this._callback.addTask=e,this.element.querySelector(".add-task__form").addEventListener("submit",this.#s)};#a=()=>{document.querySelector("#add-task").value=""};#s=e=>{e.preventDefault();const t=document.querySelector("#add-task").value;this._callback.addTask(t),this.#a()}}const i="backlog",o="processing",l="done",d="basket",h="UPDATE_TASK",c="ADD_TASK",k="DELETE_TASK";class p{#n=null;#r=null;#i=null;constructor(e,t){this.#n=e,this.#i=t}init=()=>{this.#o(),this.#r.setAddTaskHandler(this.#l)};#l=e=>{const t={group:i,description:e};this.#i(c,t)};#o=()=>{this.#r=new r,e(this.#r,this.#n)}}class u extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--backlog">\n    <h3 class="taskboard__group-heading taskboard__group-heading--backlog">Бэклог</h3>\n  </article>\n'}}class m extends s{#d=null;constructor(e){super(),this.#d=e}get template(){return(e=>{let t;switch(e){case o:case l:t="taskboard__list--sorted";break;case d:t="taskboard__list--trash";break;default:t=""}return`\n  <div class="taskboard__list ${t}" data-type=${e}></div>\n  `})(this.#d)}setDragOverMoveHandler=()=>{this.element.addEventListener("dragover",(e=>{e.preventDefault();const t=document.querySelector(".task--dragged");let s=t.parentElement;const a=e.target;if(!a.classList.contains("task"))return;a.parentElement!==s&&(s=a.parentElement);const n=a===t.nextElementSibling?a.nextElementSibling:a;s.insertBefore(t,n)}))}}class g extends s{get template(){return'\n  <div class="taskboard__item task task--empty">\n    <p>Добавьте задачу</p>\n  </div>\n'}}class _ extends n{constructor(e){super(),this._state=this.parseTaskToState(e)}get template(){return(e=>{let t;switch(e.group){case o:t="task--processing";break;case l:t="task--done";break;case d:t="task--basket";break;default:t=""}return`\n  <div class="taskboard__item task ${t}" draggable='true' data-id=${e.id}>\n    <div class="task__body">\n      <p class="task__view">${e.description}</p>\n      <input class="task__input" type="text" value='${e.description}'>\n    </div>\n    <button class="task__edit" type="button" aria-label="Изменить"></button>\n  </div>\n`})(this._state)}setDragStartMoveHandler=()=>{this.element.addEventListener("dragstart",(e=>{const t=e.target;t.classList.contains("task")&&t.classList.add("task--dragged")}))};setDragEndMoveHandler=e=>{this._callback.moveTask=e,this.element.addEventListener("dragend",this.#h)};#h=e=>{const t=document.querySelector(".task--dragged"),s=t.dataset.id,a=t.nextElementSibling?t.nextElementSibling.dataset.id:0;if(t.parentElement.classList.contains("taskboard__list")){const n=t.parentElement.dataset.type;this._callback.moveTask(s,a,n),e.target.classList.remove("task--dragged")}};setEditTaskClickHandler=e=>{this._callback.editClick=e,this.element.querySelector(".task__edit").addEventListener("click",this.#c)};#c=e=>{e.preventDefault(),this.element.draggable=!1,this._callback.editClick()};setSaveEditingTaskHandler=e=>{this._callback.saveTask=e,this.element.addEventListener("keydown",this.#k)};#k=e=>{const t=this.element.querySelector(".task__input").value;if("Enter"===e.code){if(t.length<3)return;this._state.description=t,this.element.draggable=!0,this._callback.saveTask(this.parseTaskToState(this._state))}};parseTaskToState=e=>({...e});parseStateToTask=e=>({...e});reset=e=>{this.updateElement(this.parseStateToTask(e))};_restoreHandlers=()=>{this.setEditTaskClickHandler(this._callback.editClick),this.setSaveEditingTaskHandler(this._callback.saveTask),this.setDragStartMoveHandler(),this.setDragEndMoveHandler(this._callback.moveTask)}}const b="default";class w{#p=null;#u=b;#n=null;#m=null;#i=null;#g=null;#_=null;constructor(e,t,s,a){this.#n=e,this.#i=t,this.#g=s,this.#_=a}init=a=>{this.#p=a;const n=this.#m;this.#m=new _(this.#p),this.#m.setEditTaskClickHandler(this.#b),this.#m.setSaveEditingTaskHandler(this.#w),this.#m.setDragStartMoveHandler(),this.#m.setDragEndMoveHandler(this.#_),window.addEventListener("keydown",this.#C),null!==n?(((e,t)=>{if(!(e instanceof s&&t instanceof s))throw new Error("Can replace only components");const a=e.element,n=t.element,r=n.parentElement;if(null===r)throw new Error("Parent element doesn't exist");r.replaceChild(a,n)})(this.#m,n),t(n)):e(this.#m,this.#n)};#T=()=>{this.#m.element.classList.remove("task--active"),this.#u=b};#b=()=>{this.#u===b&&(this.#m.element.classList.add("task--active"),this.#g(),this.#u="editing")};#w=e=>{this.#T(),this.#i(h,e)};resetView=()=>{this.#u!==b&&this.#T()};destroy=()=>{t(this.#m)};#C=e=>{"Escape"===e.code&&(this.#m.reset(this.#p),this.#T())}}class C{_container=null;_tasks=null;_taskPresenters=new Map;_handleModeChange=null;_handleChangeData=null;_handleChangePosition=null;_taskBoardListComponent=null;_groupComponent=null;_emptyComponent=null;init=e=>{this._tasks=e,this._renderTasksGroup(),this._taskBoardListComponent.setDragOverMoveHandler()};resetGroupView=()=>{this._taskPresenters.forEach((e=>e.resetView()))};_renderTask=e=>{const t=new w(this._taskBoardListComponent.element,this._handleChangeData,this._handleModeChange,this._handleChangePosition);t.init(e),this._taskPresenters.set(e.id,t)};_renderTasks=()=>this._tasks.forEach((e=>this._renderTask(e)));_renderNoTasks=()=>{e(this._emptyComponent,this._taskBoardListComponent.element)};_clearGroupHandler=()=>{this._taskPresenters.forEach((e=>e.destroy())),this._taskPresenters.clear()};_renderTasksGroup=()=>{e(this._groupComponent,this._container),e(this._taskBoardListComponent,this._groupComponent.element),0!==this._tasks.length?this._renderTasks():this._renderNoTasks()};destroy=()=>{t(this._groupComponent),t(this._taskBoardListComponent),this._clearGroupHandler()}}class T extends C{constructor(e,t,s,a){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=a,this._taskBoardListComponent=new m(i),this._groupComponent=new u,this._emptyComponent=new g}}class v extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--processing">\n    <h3 class="taskboard__group-heading taskboard__group-heading--processing">В процессе</h3>\n  </article>\n'}}class E extends s{get template(){return'\n  <div class="taskboard__item task task--empty">\n    <p>Перетащите карточку</p>\n  </div>\n'}}class y extends C{constructor(e,t,s,a){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=a,this._taskBoardListComponent=new m(o),this._groupComponent=new v,this._emptyComponent=new E}}class f extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--done">\n    <h3 class="taskboard__group-heading taskboard__group-heading--done">Готово</h3>\n  </article>\n'}}class P extends C{constructor(e,t,s,a){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=a,this._taskBoardListComponent=new m(l),this._groupComponent=new f,this._emptyComponent=new E}}class H extends s{get template(){return'\n  <article class="taskboard__group taskboard__group--basket">\n    <h3 class="taskboard__group-heading taskboard__group-heading--basket">Корзина</h3>\n  </article>\n'}}class S extends s{#v=null;constructor(e){super(),this.#v=e}get template(){return`\n  <button class="taskboard__button button button--clear" type="button" ${this.#v?"disabled":""}>\n    <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">\n      <rect x="15.5374" y="5.16638" width="1.83333" height="14.6667" transform="rotate(45 15.5374 5.16638)"\n        fill="white" />\n      <rect x="16.8337" y="15.5372" width="1.83333" height="14.6667" transform="rotate(135 16.8337 15.5372)"\n        fill="white" />\n    </svg>\n    <span>Очистить</span>\n  </button>\n`}setClearBoardClickHandler=e=>{this._callback.clearBoard=e,this.element.addEventListener("click",this.#E)};#E=e=>{e.preventDefault(),this._callback.clearBoard()}}class x extends s{get template(){return'\n  <div class="task--empty task task--empty-trash">\n    <p>Корзина пуста</p>\n  </div>\n'}}class D extends C{#y=null;#v=!1;constructor(e,t,s,a){super(),this._container=e,this._handleModeChange=t,this._handleChangeData=s,this._handleChangePosition=a,this._taskBoardListComponent=new m(d),this._groupComponent=new H,this._emptyComponent=new x}_clearBasketHandler=()=>{this._taskPresenters.forEach((e=>e.destroy())),this._taskPresenters.clear(),this.#v=!0,this._handleChangeData(k,this._tasks)};_renderClearButton=()=>{this.#y=new S(this.#v),this.#y.setClearBoardClickHandler(this._clearBasketHandler),e(this.#y,this._groupComponent.element)};_renderTasksGroup=()=>{e(this._groupComponent,this._container),e(this._taskBoardListComponent,this._groupComponent.element),0===this._tasks.length?(this._renderNoTasks(),this.#v=!0):(this._renderTasks(),this.#v=!1),this._renderClearButton()}}const B={[i]:e=>e.filter((e=>e.group===i)),[o]:e=>e.filter((e=>e.group===o)),[l]:e=>e.filter((e=>e.group===l)),[d]:e=>e.filter((e=>e.group===d))};class M extends s{get template(){return'\n  <div class="spinner-box">\n    <div class="leo-border-1">\n      <div class="leo-core-1"></div>\n    </div>\n    <div class="leo-border-2">\n      <div class="leo-core-2"></div>\n    </div>\n  </div>\n'}}class L{#f=new Set;addObserver(e){this.#f.add(e)}removeObserver(e){this.#f.delete(e)}_notify(e,t){this.#f.forEach((s=>s(e,t)))}}class G{constructor(e){this._endPoint=e}_load=async({url:e,method:t="GET",body:s=null,headers:a=new Headers})=>{const n=await fetch(`${this._endPoint}/${e}`,{method:t,body:s,headers:a});try{return G.checkStatus(n),n}catch(e){G.catchError(e)}};static parseResponse=e=>e.json();static checkStatus=e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`)};static catchError=e=>{throw e}}const A=document.querySelector(".board-app__main").querySelector(".board-app__inner"),V=new class extends L{#P=[];#H=null;#S=localStorage.order;constructor(e){super(),this.#H=e}init=async()=>{try{const e=await this.#H.tasks;this.#S?this.#P=this.#S.split(",").map((t=>e.find((e=>e.id===t)))):this.#P=[...e]}catch(e){this.#P=[]}this._notify()};get tasks(){return this.#P}updateTask=async e=>{const t=this.#P.findIndex((t=>t.id===e.id));if(-1===t)throw new Error("Can't update unexciting task");try{const s=await this.#H.updateTask(e);this.#P=[...this.#P.slice(0,t),s,...this.#P.slice(t+1)],this._notify()}catch(e){throw new Error("Can't update task")}};addTask=async e=>{try{const t=await this.#H.addTask(e);this.#P=[...this.#P,t],localStorage.order=[...this.#P.map((e=>e.id))],this._notify()}catch(e){throw new Error("Can't add task")}};removeTasks=e=>{e.forEach((e=>{const t=this.#P.findIndex((t=>t.id===e.id));if(-1===t)throw new Error("Can't delete unexciting task");(async()=>{await this.#H.deleteTask(e)})(),this.#P=[...this.#P.slice(0,t),...this.#P.slice(t+1)],localStorage.order=[...this.#P.map((e=>e.id))]})),this._notify()};changePositionTask=async(e,t)=>{const s=this.#P.findIndex((t=>e.id===t.id));if(this.#P=[...this.#P.slice(0,s),...this.#P.slice(s+1)],t){const s=this.#P.findIndex((e=>t===e.id));this.#P=[...this.#P.slice(0,s),e,...this.#P.slice(s)],localStorage.order=[...this.#P.map((e=>e.id))]}else this.#P=[...this.#P,e],localStorage.order=[...this.#P.map((e=>e.id))]};getBacklogTasks=()=>B[i](this.tasks);getProcessingTasks=()=>B[o](this.tasks);getDoneTasks=()=>B[l](this.tasks);getBasketTasks=()=>B[d](this.tasks)}(new class extends G{get tasks(){return this._load({url:"tasks"}).then(G.parseResponse)}updateTask=async e=>{const t=await this._load({url:`tasks/${e.id}`,method:"PUT",body:JSON.stringify(e),headers:new Headers({"Content-Type":"application/json"})});return await G.parseResponse(t)};addTask=async e=>{const t=await this._load({url:"tasks",method:"POST",body:JSON.stringify(e),headers:new Headers({"Content-Type":"application/json"})});return await G.parseResponse(t)};deleteTask=async e=>await this._load({url:`tasks/${e.id}`,method:"DELETE"})}("https://63ab271ffdc006ba6057af23.mockapi.io/kanban-board"));V.init();const $=new class{#n=null;#x=null;#D=new a;#B=new M;#M=null;#L=null;#G=null;#A=null;#V=null;#$=!0;constructor(e,t){this.#n=e,this.#x=t,this.#M=new p(e,this.#q),this.#L=new T(this.#D.element,this.#O,this.#q,this.#N),this.#G=new y(this.#D.element,this.#O,this.#q,this.#N),this.#A=new P(this.#D.element,this.#O,this.#q,this.#N),this.#V=new D(this.#D.element,this.#O,this.#q,this.#N),this.#x.addObserver(this.#j)}init=()=>{this.#M.init(),this.#F()};get tasks(){return this.#x.tasks}#O=()=>{this.#L.resetGroupView(),this.#G.resetGroupView(),this.#A.resetGroupView(),this.#V.resetGroupView()};#q=(e,t)=>{switch(e){case h:this.#x.updateTask(t);break;case c:this.#x.addTask(t);break;case k:this.#x.removeTasks(t)}};#N=(e,t,s)=>{const a=this.tasks.find((t=>e===t.id)),n={...a,group:s};this.#x.changePositionTask(n,t),a.group!==s&&this.#q(h,n)};#j=()=>{this.#$=!1,this.#I(),this.#F()};#R=()=>{e(this.#B,this.#D.element,"afterbegin")};#F=()=>{e(this.#D,this.#n),this.#$?this.#R():(this.#L.init(B[i](this.tasks)),this.#G.init(B[o](this.tasks)),this.#A.init(B[l](this.tasks)),this.#V.init(B[d](this.tasks)))};#I=()=>{t(this.#B),this.#L.destroy(),this.#G.destroy(),this.#A.destroy(),this.#V.destroy()}}(A,V);$.init()})();
//# sourceMappingURL=bundle.js.map